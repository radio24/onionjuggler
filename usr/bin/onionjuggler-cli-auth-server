#!/usr/bin/env sh

## manage client authorization server side (HiddenServiceDir/authorized_clients/)

onionjuggler_defaults="/usr/share/onionjuggler/defaults.sh"
[ -e "${onionjuggler_defaults}" ] || { printf '%s\n' "library ${onionjuggler_defaults} does not exist"; exit 1; }
[ -f "${onionjuggler_defaults}" ] || { printf '%s\n' "library ${onionjuggler_defaults} is not a regular file"; exit 1; }
[ -r "${onionjuggler_defaults}" ] || { printf '%s\n' "library ${onionjuggler_defaults} can not be read"; exit 1; }
. "${onionjuggler_defaults}"
source_conf

me="${0##*/}"
check_plugin_enabled "${me}" || error_msg "Plugin '${me}' is disabled by configuration"

usage(){
  printf %s"Usage: ${me} [--option <ARGUMENT>]
Description: server side onion authorization on HiddenServiceDir/authorized_clients
Complete options:
  --on [--service=<SERVICE>] [--client-pub-file=<FILE>] [--replace-file]
                            import '<FILE>.auth' file
  --on [--service=<SERVICE>] [--client=<CLIENT>] [--client-pub-config=<CONFIG>] [--replace-file]
                            import client public configuration
  --on [--service=<SERVICE>] [--client=<CLIENT>] [--client-pub-key=<CLIENT_PUB_KEY>] [--replace-file]
                            generate client keys and import pub key, else use existent client's pub key
  --off [--service=<@all|SERV1,SERV2,...>] [--client=<@all|CLIENT1,CLIENT2,...>]
                            remove client authorization
  --list [--service=<@all|SERV1,SERV2,...>]
                            list authorized clients for indicated service

Options:
  --on
    --service=<SERVICE>     service that will hold client keys
    --client-pub-file=<FILE>
                            client public file
    --client-pub-config=<CONFIG>
                            client private configuration
    --client-pub-key <KEY>
                            client private key
    --replace-file          replace file if it exists under the same name
  --off                     del client from HiddenServiceDir/authorized_clients
    --service=<@all|SERV1,SERV2,...>]
                            service that client will be removed from
    --client=<@all|CLIENT1,CLIENT2,...>
                            client that will be removed
  --list                    list authorized clients for indicated service
    --service=<@all|SERV1,SERV2,...>]
                            service that clients will be listed from
  --version                 print version
  --getopt                  print options parsed
  --getconf                 print configuration values
  --signal=<SIGNAL>         signal tor reload, restart, none
  -h, --help                print this help message
"
  exit 1
}


########################
#### OPTION PARSING ####

## hacky getopts
## accepts long (--option) and short (-o) options
## accept argument assignment with space (--option arg | -o arg) or equal sign (--option=arg | -o=arg)
[ -z "${1}" ] && usage
while :; do
  shift_n=""
  opt_orig="${1}" ## save opt orig for error message to understand which opt failed
  # shellcheck disable=SC2034
  arg_possible="${2}" ## need to pass the second positional parameter because maybe it is an argument
  clean_opt "${1}" || break
  case "${opt}" in
    signal) get_arg signal;;
    on|off|list|n|f|l) set_arg status "${opt}";;
    s|service) get_arg service;;
    c|client) get_arg client;;
    client-pub-file) get_arg client_pub_file;;
    client-pub-config) get_arg client_pub_config;;
    client-pub-key) get_arg client_pub_key;;
    replace-file) set_arg replace_file "1";;
    getopt|getconf|V|version) set_arg dev "${opt}";;
    h|help) usage;;
    *) error_msg "Invalid option: '${opt_orig}'";;
  esac
  ## shift as many times as demanded
  ## if empty, shift at least once to pass to next option
  shift "${shift_n:-1}"
  [ -z "${1}" ] && break
done

case "${dev}" in
  getconf) get_conf_values; exit 0;;
  getopt) printf %s"${arg_saved}\n"; exit 0;;
  V|version) printf '%s\n' "${me} ${version}"; exit 0;;
esac


pre_run_check
is_service_dir_empty
case "${status}" in

  ## as the onion service operator, make your onion authenticated by generating a pair or public and private keys,
  ## the client pub key is automatically saved inside <HiddenServiceDir>/authorized_clients/alice.auth
  ## the client private key is shown in the screen and the key file deleted
  ## the onion service operator should send the private key for the desired client
  n|on)

    auth_server_check_file(){
      test -f "${client_pub_file}" || error_msg "file ${client_pub_file} does not exist or is not a regular file"
      test -r "${client_pub_file}" || error_msg "file ${client_pub_file} cannot be read"
      client_pub_file_name="${client_pub_file##*/}"
      [ "${client_pub_file_name%%*[^a-zA-Z0-9_.-]*}" ] || error_msg "file name can only contain letters, numbers, hifen, underscore and dot"
      echo "${client_pub_file_name}" | cut -c 1 | grep -qF "." && error_msg "file name can not start with dot"
      ## avoid copying wrong file to the auth dir
      echo "${client_pub_file_name}" | grep -q ".auth$" || error_msg "file name does not end with '.auth'"
    }

    auth_server_check_replace(){
      client_pub_file="${1}"
      client_pub_file_name="${client_pub_file##*/}"
      if test -f "${tor_data_dir_services}/${service}/authorized_clients/${client_pub_file_name}"; then
        test -n "${replace_file}" || error_msg "file named ${client_pub_file_name} already exist on ${tor_data_dir_services}/${service}/authorized_clients, to replace it, use the option '--replace-file'"
      fi
      ## multiple files with the same pub key leads to a tor error
      for auth in "${tor_data_dir_services}/${service}/authorized_clients"/*; do
        [ "${auth##*/}" = "*" ] && break
        if [ "${auth##*/}" != "${client_pub_file_name}" ]; then
          ## compare onion address, the first field
          [ "${client_pub_key_config%%:*}" = "$(cut -d ":" -f3 "${auth}")" ] && error_msg "file with the same onion address already present on ${auth}"
        fi
      done
    }

    auth_server_check_content(){
      client_pub_file_content="${1}"
      echo "${client_pub_file_content}" | grep -q "^descriptor:x25519:" || error_msg "configuration does not start with pattern 'descriptor:x25519:"
      [ "${client_pub_file_content%%*[^a-zA-Z0-9:]*}" ] || error_msg "configuration has special characters"
      client_pub_file_pub_found="$(echo "${client_pub_file_content}" | cut -d ":" -f3)"
      [ "${client_pub_file_pub_found%%*[^A-Z2-7]*}" ] || error_msg "client public key '${client_pub_file_pub_found}' is not within base32 alphabet upper-case encoding [A-Z][2-7]"
      [ "${#client_pub_file_pub_found}" = "52" ] || error_msg "client public key '${client_pub_file_pub_found}' has size of '${#client_pub_file_pub_found}', but expected 52 chars"
       ## this check is last in the list because it doesn't indicate where the problem is, just that the size doesn't match
      [ "${#client_pub_file_content}" = "70" ] || error_msg "config '${client_pub_file_content}' has size '${#client_pub_file_content}', but expected     70 chars"

    }

    auth_server_finish(){
      # shellcheck disable=SC2034
      auth_server_conf="${tor_data_dir_services}/${service}/authorized_clients/${client}.auth"
      safe_edit tmp auth_server_conf
      printf %s"${client_pub_key_config}\n" | tee "${auth_server_conf_tmp}" >/dev/null
      printf %s"${bold}Server side authorization configured${nocolor}\n"
      printf %s"\nClient public key config saved to ${tor_data_dir_services}/${service}/authorized_clients/${client}.auth\n"
      printf %s"${bold}- Client pub conf:${nocolor} ${client_pub_key_config}\n"
      printf '\n'
    }

    check_opt_filled service
    [ "${service}" != "@all" ] && check_name service
    [ "${service}" = "@all" ] && { create_service_list ; service="${service_name_list}" ; }
    [ "${client}" = "@all" ] && error_msg "Client name cannot be @all, it is a restricted wildcard referring to all clients"

    test_service_exists "${service}"
    if test -n "${client_pub_file}"; then
      client="${client_pub_file##*/}"
      client="${client%.auth}"
      auth_server_check_file
      client_pub_key_config="$(cat "${client_pub_file}")"
      auth_server_check_content "${client_pub_key_config}"
      auth_server_check_replace "${client}.auth"
      auth_server_finish

    elif test -n "${client_pub_config}"; then
      check_opt_filled client
      check_name client
      client_pub_key_config="${client_pub_config}"
      auth_server_check_content "${client_pub_key_config}"
      auth_server_check_replace "${client}.auth"
      auth_server_finish

    elif test -n "${client_pub_key}"; then
      check_opt_filled client
      check_name client
      client_pub_key_config="descriptor:x25519:${client_pub_key}"
      auth_server_check_content "${client_pub_key_config}"
      auth_server_check_replace "${client}.auth"
      auth_server_finish

    else
      check_opt_filled client
      check_name client
      gen_auth_key_pair
      auth_server_check_replace "${client}.auth"
      auth_server_finish
      printf %s"Send the private key to the client of ${onion_hostname}\n"
      printf %s"${bold}- Client priv conf:${nocolor} ${client_priv_key_config}\n\n"
    fi

    signal_tor
  ;;


  ## as the onion service operator, after making your onion service authenticated, you can also remove a specific client authorization
  ## if no clients are present, the service will be available to anyone that has the onion service address
  f|off)
    auth_server_remove_clients(){
      service="${1}"
      client="${2}"
      test_service_exists "${service}"
      #notice "Service: ${service}"
      if [ "${client}" = "@all" ]; then
        rm -fv "${tor_data_dir_services}/${service}/authorized_clients"/*.auth
      else
        rm -fv "${tor_data_dir_services}/${service}/authorized_clients/${client}.auth"
      fi
      if ! ls "${tor_data_dir_services}/${service}/authorized_clients"/*.auth 2>/dev/null; then
        notice "Service '${service}' does not have clients, it is accessible by anyone with the onion address"
      fi
    }

    check_opt_filled service
    [ "${service}" != "@all" ] && check_name service
    check_opt_filled client

    if [ "${service}" = "@all" ]; then
      notice "${bold}Removing client authorization for:${nocolor}"
      notice "${bold}Service:${nocolor} @all - ALL SERVICES"
      create_service_list; service="${service_name_list}"
      if [ "${client}" = "@all" ]; then
        notice "${bold}Clients:${nocolor} @all - ALL CLIENTS\n"
      else
        notice "If any client remains, the service will still be authenticated."
      fi
    else
      notice "${bold}Removing client authorization for:${nocolor}"
      notice "${bold}Service:${nocolor} ${service}"
      if [ "${client}" = "@all" ]; then
        notice "${bold}Clients: @all${nocolor}\nThe service is now accessible for anyone with the onion address.\n"
      else
        notice "If any client remains, the service will still be authenticated."
      fi
    fi

    loop_list auth_server_remove_clients "${service}" "${client}"
    printf "\n"
    signal_tor
  ;;


  l|list)
    auth_server_list(){
      service="${1}"
      test_service_exists "${service}"
      create_client_list "${service}"
      notice "\n${bold}Service:${nocolor} ${service}"
      if [ -n "${client_count}" ]; then
        [ -n "${client_name_list}" ] && printf %s"${bold}Clients:${nocolor} ${client_name_list} (${client_count})\n"
        for auth in "${tor_data_dir_services}/${service}/authorized_clients"/*; do
          auth="${auth##*/}"
          notice "${bold}- ${auth}:${nocolor} $(grep "descriptor:x25519:" "${tor_data_dir_services}/${service}/authorized_clients/${auth}")${nocolor}"
        done
      else
        notice "${bold}Clients:${nocolor} NONE (0)"
      fi
    }

    notice "${bold}Authorized clients for Onion Services in ${tor_data_dir_services}${nocolor}"
    if [ -z "${service}" ] || [ "${service}" = "@all" ]; then
      create_service_list; service="${service_name_list}"
    fi
    loop_list auth_server_list "${service}"
  ;;


  *) usage
esac
