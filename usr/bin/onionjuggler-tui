#!/usr/bin/env sh

## DESCRIPTION
## This file lets you manage your authorized clients for hidden services
## It is a TUI for the onionjuggler-cli with everything integrated in this menu
##
## SYNTAX
## onionjuggler-tui
##
## Lines that begin with "## " try to explain what's going on. Lines
## that begin with just "#" are disabled commands.

onionjuggler_defaults="/usr/share/onionjuggler/defaults.sh"
[ -e "${onionjuggler_defaults}" ] || { printf '%s\n' "library ${onionjuggler_defaults} does not exist"; exit 1; }
[ -f "${onionjuggler_defaults}" ] || { printf '%s\n' "library ${onionjuggler_defaults} is not a regular file"; exit 1; }
[ -r "${onionjuggler_defaults}" ] || { printf '%s\n' "library ${onionjuggler_defaults} can not be read"; exit 1; }
. "${onionjuggler_defaults}"
source_conf

###################
#### VARIABLES ####
me="${0##*/}"
i=0

usage(){
  printf "Configure the environment for OnionJuggler
Usage: onionjuggler-tui [--option <ARG>]
Options:
  -V, --version                               print version
  -h, --help                                  show this help message
"
  exit 1
}

while :; do
  shift_n=""
  # shellcheck disable=SC2034
  opt_orig="${1}" ## save opt orig for error message to understand which opt failed
  # shellcheck disable=SC2034
  arg_possible="${2}" ## need to pass the second positional parameter because maybe it is an argument
  clean_opt "${1}" || break
  case "${opt}" in
    V|version) printf '%s\n' "${me} ${version}"; exit 0;;
    h|help) usage;;
    "") break;;
    *) error_msg "Invalid option: ${opt_orig}";;
  esac
  shift "${shift_n}"
done


pre_run_check

#if has vitor; then
#  editor="vitor"
#else
  ## First try environment variables [SUDO|DOAS]_EDITOR, if empty try VISUAL, if empty try EDITOR, if empty use Vi
  if [ -n "${SUDO_USER}" ]; then
    su_cmd="sudo"
  elif [ -n "${DOAS_USER}" ]; then
    su_cmd="doas"
  fi
  [ -n "${su_cmd}" ] && eval PRIVILEGED_EDITOR='$'"$(printf %s"${su_cmd##*/}" | tr '[:lower:]' '[:upper:]')_EDITOR"
  editor="${PRIVILEGED_EDITOR:-"${VISUAL:-"${EDITOR:-vi}"}"}"
#fi

has onionjuggler-tui || error_msg "onionjuggler-tui must be installed"

if ! has onionjuggler-cli && ! has onionjuggler-cli-web \
 && ! has onionjuggler-cli-auth-client && ! has onionjuggle-cli-auth-server; then
  error_msg "onionjuggler-tui must be complemented by any onionjuggler script, it can not work standalone. Neither onionjuggler-cli, onionjuggler-cli-web, onionjuggler-cli-auth-client, onionjuggler-cli-auth-server is installed"
fi

has "${dialog_box}" || error_msg "${dialog_box} is not installed"

case "${dialog_box}" in
  dialog)
    #yes_flag="--yes-label"
    #no_flag="--no-label"
    ok_flag="--ok-label"
    cancel_flag="--cancel-label"
    no_cancel_flag="--no-cancel"
    export DIALOGRC="${DIALOGRC:="/etc/onionjuggler/dialogrc"}"
  ;;
  whiptail)
    whiptail_height=1
    #yes_flag="--yes-button"
    #no_flag="--no-button"
    ok_flag="--ok-button"
    cancel_flag="--cancel-button"
    no_cancel_flag="--nocancel"
  ;;
  *) error_msg "dialog_box can be either 'dialog' or 'whiptail', not '${dialog_box}'"
esac

###########################
######## FUNCTIONS ########

return_to_tui(){
  notice "${yellow}Press ${underline}ENTER${nounderline}${yellow} to return to the TUI! ${nocolor}"
  # shellcheck disable=SC2034
  read -r confirmation
}

## $1 [checklist|menu]
## $2 complementary title
service_menu(){
  ## safeguard, WS should not run this function anyway
  [ "${operating_system}" = "anon-workstation" ] && return 0

  dialog_type="${1}"
  compl_title="${2}"
  i=0
  for service in "${tor_data_dir_services}"/*; do
    service="${service##*/}"
    i=$((i+1))
    onion_hostname="$(grep ".onion" "${tor_data_dir_services}"/"${service}"/hostname 2>/dev/null)"
    case "${dialog_type}" in
      checklist) service_list="$(printf "%s\n%s\n%s\n%s\n" "${service_list}" "${service}" "${onion_hostname%.onion}" 0)";;
      menu) service_list="$(printf "%s\n%s\n%s\n" "${service_list}" "${service}" "${onion_hostname%.onion}")";;
    esac
  done

  if [ -n "${service_list}" ]; then
    title="OnionJuggler - ${compl_title}"
    menu="\nUse spacebar to select:"
    [ "${i}" -gt 11 ] && i="11"
    case "${dialog_type}" in
      checklist)
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --clear --separate-output --backtitle "${backtitle}" --title "${title}" --"${dialog_type}" "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list} 3>&1 1>&2 2>&3)"
      ;;
      menu)
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" --"${dialog_type}" "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list} 3>&1 1>&2 2>&3)"
      ;;
    esac
    service_name_list=""
    [ -n "${choice_service}" ] && service_name_list="$(printf %s"${choice_service}" | tr "\n" ",")"
  fi
}


is_dir_empty(){
  dir="${1}"
  [ -d "${dir}" ] && files=$(ls -qAH -- "${dir}") && [ -z "${files}" ] || return 1
}

###########################
########## MAIN ##########
## pattern:
##  choice_name="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" --"${flags}" --"${dialog_type}" "${subtitle}" "$((${height}+whiptail_height")) "${width}" "${list_height}")"
##  [ -n "${choice_service}" ] && printf "Do something here\n"

## clear the screen after exiting
#trap 'tput reset' EXIT
#trap 'tput reset; exit' INT

title="OnionJuggler - Main Menu"
menu="\nUse enter/spacebar to select:"
backtitle="OnionJuggler - Onion Services Manager"
if is_dir_empty "${tor_data_dir_services}"; then
  if [ "${operating_system}" = "anon-workstation" ]; then
    # shellcheck disable=SC2046,SC2043
    choice_main=$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
    "${ok_flag}" "Select" "${no_cancel_flag}" --menu "${menu}" "$((13+whiptail_height))" 65 5 \
    "QUIT" "Exit menu and clear the screen" \
    $(for item in onionjuggler-cli-web; do
    command -v "${item}" >/dev/null || return 0
    check_plugin_enabled "${item##*onionjuggler-cli-}" || return 0
    string=""
    case "${item##*onionjuggler-cli-}" in
      web) string="WEB webserver_management";;
    esac
    echo "${string}"
    done) 3>&1 1>&2 2>&3)
  else
    # shellcheck disable=SC2046,SC2043
    choice_main=$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
    "${ok_flag}" "Select" "${no_cancel_flag}" --menu "${menu}" "$((13+whiptail_height))" 65 5 \
    "QUIT" "Exit menu and clear the screen" \
    "ENABLE" "Enable a onion service" \
    $(for item in onionjuggler-cli-auth-client onionjuggler-cli-web; do
      command -v "${item}" >/dev/null || return 0
      check_plugin_enabled "${item##*onionjuggler-cli-}" || return 0
      string=""
      case "${item##*onionjuggler-cli-}" in
        auth-client) string="AUTH_CLIENT client_side_onion_credentials";;
      esac
    echo "${string}"
    done) 3>&1 1>&2 2>&3)
  fi
else
  # shellcheck disable=SC2046
  choice_main=$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
  "${ok_flag}" "Select" "${no_cancel_flag}" --menu "${menu}" "$((19+whiptail_height))" 70 10 \
  "QUIT" "Exit menu and clear the screen" \
  "INFO" "See credentials (onion address, authorized clients)" \
  "ENABLE" "Enable a onion service" \
  "DISABLE" "Disable chosen onion service" \
  "RENEW" "Renew onion service address" \
  $(for item in onionjuggler-cli-auth-client onionjuggler-cli-auth-server onionjuggler-cli-web ; do
    command -v "${item}" >/dev/null || return 0
    check_plugin_enabled "${item##*onionjuggler-cli-}" || return 0
    string=""
    case "${item##*onionjuggler-cli-}" in
      auth-client) string="AUTH_CLIENT client_side_onion_credentials";;
      auth-server) string="AUTH_SERVER control_your_onion_clients";;
      web) string="WEB webserver_management";;
    esac
  echo "${string}"
  done) 3>&1 1>&2 2>&3)
fi


case "${choice_main}" in

  ENABLE)

    title="Onion Service - Activation"
    menu="Choose socket type:"

    service_text="\nName your service directory in one string and no space.\n(e.g.: ssh)"
    service_name="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
    --inputbox "${service_text}" 10 60 3>&1 1>&2 2>&3)"

    if [ -n "${service_name}" ]; then
      # shellcheck disable=SC2034
      unix_socket_text="\nInsert the virtual ports separated by space. (e.g.: 80 8080)"
      # shellcheck disable=SC2034
      tcp_socket_text="\nInsert the virtual ports and targets. Only one virtual port required to create a service/
      \nInsert the ports in the following format:\nVIRPORT:TARGET VIRTPORTn:TARGETn\n(e.g.: 80:50000 8080:50001) (e.g.: 80:192.168.5.10:50000 8080:192.168.5.10:50001)"

      if [ "${operating_system}" = "anon-gateway" ]; then
        ## GW has an internal network between hosts, unix socket not viable and tcp socket does
        ## not leak address to the local network as it is only possible to connect to it via tor
        socket="tcp"
        choice_anon_target="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --menu "${menu}" "$((9+whiptail_height))" 70 2 \
        "WORKSTATION" "service targeting the Workstation" \
        "GATEWAY" "service targeting the Gateway" \
        3>&1 1>&2 2>&3)"
        [ "${choice_anon_target}" = "GATEWAY" ] && gateway="--gateway"
      else
        choice_socket="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --menu "${menu}" "$((9+whiptail_height))" 70 2 \
        "UNIX" "unix:path (more secure)" \
        "TCP" "addr:port (leaks onion address to the local network)" \
        3>&1 1>&2 2>&3)"
        socket="$(printf '%s\n' "${choice_socket}" | tr '[:upper:]' '[:lower:]')"
      fi
      if [ -n "${socket}" ]; then
        eval socket_text='$'"${socket}_socket_text"
        service_ports="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --inputbox "${socket_text}" 15 70 3>&1 1>&2 2>&3)"
        if [ -n "${service_ports}" ]; then
          tput reset
          onionjuggler-cli --on --service "${service_name}" --socket "${socket}" --port "${service_ports}" ${gateway}
          return_to_tui
        fi
      fi
    fi
  ;;


  DISABLE)
    service_menu checklist "Disable"
    if [ -n "${service_name_list}" ]; then
      title="Onion Service - Deactivation"
      menu="
DISABLE: Service will be disabled, lines from the torrc deleted but the folder will be kept.

PURGE: Service will be permanently disabled, all the directory data, including hidden service keys and clients will be deleted permanently (you won't be able to use the same onion address)."
      choice_disable="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((15+whiptail_height))" 80 2 \
      "DISABLE" "Only disable (remove configuration lines)" \
      "PURGE" "Disable and Purge HiddenServiceDir (delete onion keys)" \
      3>&1 1>&2 2>&3)"
      if [ -n "${choice_disable}" ]; then
        [ "${choice_disable}" = "PURGE" ] && purge="--purge"
        tput reset
        onionjuggler-cli --off --service "${service_name_list}" "${purge}"
        return_to_tui
      else
        text="\nOperation canceled, nothing was executed."
        "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text}" 10 50
      fi
    fi
  ;;


  RENEW)
    service_menu checklist "Renew"
    if [ -n "${service_name_list}" ]; then
      title="Renew - Confirmation"
      menu="\nRenewing services will purge its keys. You won't be able to use the same onion after renewing (unless you have made a backup beforehand).\nAre you sure you want to change the currenct onion address of your service(s)?"
      if "${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
      --yesno "${menu}" "$((10+whiptail_height))" 80 3>&1 1>&2 2>&3; then
        tput reset
        onionjuggler-cli --renew --service "${service_name_list}"
        return_to_tui
      fi
    fi
  ;;


  AUTH_SERVER)
    option_plugin="onionjuggler-cli-auth-server"
    if ! check_plugin_enabled "${option_plugin}"; then
      text="${option_plugin} is disabled by configuration"
      "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text}" 10 50
    elif ! has "${option_plugin}"; then
      text="${option_plugin} is not installed"
      "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text}" 10 50
    else
      i=0
      service_list=""
      for service in "${tor_data_dir_services}"/*; do
        service="${service##*/}"
        ## only include services that have at least one client
        if ! is_dir_empty "${tor_data_dir_services}/${service}/authorized_clients/"; then
          i=$((i+1))
          onion_hostname="$(grep ".onion" "${tor_data_dir_services}/${service}/hostname" 2>/dev/null)"
          service_list_menu="$(printf "%s\n%s\n%s\n" "${service_list}" "${service}" "${onion_hostname%.onion}")"
          service_list_checklist="$(printf "%s\n%s\n%s\n%s\n" "${service_list}" "${service}" "${onion_hostname%.onion}" 0)"
        fi
      done
      title="Client Authorization - Server"
      menu="\nManage client authorization of your services:"
      if [ -z "${service_list_menu}" ]; then
        auth_type="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((10+whiptail_height))" 60 3 \
        "GEN" "Generate a new key pair (public and private key)" \
        "PUB" "Register the client public key" \
        "IMP" "Import client public config from file" \
        3>&1 1>&2 2>&3)"
      else
        auth_type="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((13+whiptail_height))" 60 6 \
        "LIST" "List all clients for specific HiddenService" \
        "EDIT" "Edit an existing authorization" \
        "GEN" "Generate a new key pair (public and private key)" \
        "PUB" "Register the client public key" \
        "IMP" "Import client public config from file" \
        "DEL" "Remove a client" \
        3>&1 1>&2 2>&3)"
      fi
    fi

    case "${auth_type}" in

      LIST)
        title="Client Authorization - Server - List "
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --clear --separate-output --backtitle "${backtitle}" --title "${title}" --checklist "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list_checklist} 3>&1 1>&2 2>&3)"
        service_name_list=""
        [ -n "${choice_service}" ] && service_name_list="$(printf %s"${choice_service}" | sed "s/ /,/g")"
        if [ -n "${service_name_list}" ]; then
          tput reset
          onionjuggler-cli-auth-server --list --service "${service_name_list}"
          return_to_tui
        fi
      ;;

      EDIT)
        title="Client Authorization - Server - Edit"
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" --menu "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list_menu} 3>&1 1>&2 2>&3)"
        if [ -n "${choice_service}" ]; then
          service="${choice_service}"
          i=0
          for client in "${tor_data_dir_services}/${service}/authorized_clients"/*; do
            client="${client##*/}"
            [ "${client}" = "*" ] && break
            client="${client%*.auth}"
            i=$((i+1))
            client_list="$(printf "%s\n%s\n%s\n" "${client_list}" "${client}" ".")"
          done
          # shellcheck disable=SC2086
          choice_client="$("${dialog_box}" --backtitle "${backtitle}" --title "${title}" --menu "${menu}" \
          "$((i+8+whiptail_height))" 50 "${i}" ${client_list} 3>&1 1>&2 2>&3)"
          [ -n "${choice_client}" ] && "${editor}" "${tor_data_dir_services}/${service}/authorized_clients/${choice_client}.auth"
        fi
      ;;

      GEN)
        service_menu checklist "Auth Server Gen"
        if [ -n "${service_name_list}" ]; then
          title="Client Authorization - Server - Generate"
          menu="\nClient(s) name(s) delimited by space or/and comma (e.g.: alice, bob, carol)"
          client_name_list="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
          --inputbox "${menu}" 10 50 3>&1 1>&2 2>&3)"
          client_name_list="$(printf %s"${client_name_list}" | tr -s ' ' ',' | tr -s ',' ',')"
          if { [ -n "${service_name_list}" ] && [ -n "${client_name_list}" ]; }; then
            tput reset
            onionjuggler-cli-auth-server --on --service "${service_name_list}" --client "${client_name_list}"
            return_to_tui
          fi
        fi
      ;;

      PUB)
        service_menu menu "Auth Server Pub"
        if [ -n "${service_name_list}" ]; then
          title="Client Authorization - Server - Pub"
          menu="\nClient name (e.g.: alice)"
          client_name_list="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
          --inputbox "${menu}" 9 50 3>&1 1>&2 2>&3)"
          if [ -n "${client_name_list}" ]; then
            title="Client Authorization - Server - Pub"
            menu="\nClient public key in base32:"
            client_pub_key="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
            --inputbox "${menu}" 9 50 3>&1 1>&2 2>&3)"
            if [ -n "${client_pub_key}" ]; then
              tput reset
              onionjuggler-cli-auth-server --on --service "${service_name_list}" --client "${client_name_list}" --client-pub-key "${client_pub_key}"
              return_to_tui
            fi
          fi
        fi
      ;;

      IMP)
        service_menu menu "Auth Server Import"
        if [ -n "${service_name_list}" ]; then
          title="Client Authorization - Server - Import"
          menu="\nClient public configuration file:"
          client_pub_file="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
          --inputbox "${menu}" 9 50 3>&1 1>&2 2>&3)"
          if [ -n "${client_pub_file}" ]; then
            tput reset
            onionjuggler-cli-auth-server --on --service "${service_name_list}" --client-pub-file "${client_pub_file}"
            return_to_tui
          fi
        fi
      ;;

      DEL)
        title="Client Authorization - Server - Deletion"
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --separate-output --backtitle "${backtitle}" --title "${title}" --checklist "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${service_list_checklist} 3>&1 1>&2 2>&3)"
        if [ -n "${choice_service}" ]; then
          # shellcheck disable=SC2086
          service_total=$(IFS=' '; set -f -- ${choice_service}; printf %s"${#}")
          for service in $(printf %s"${choice_service}"); do
            for client in "${tor_data_dir_services}/${service}/authorized_clients"/*; do
              client="${client##*/}"
              [ "${client}" = "*" ] && break
              client="${client%*.auth}"
              client_list="$(printf "%s\n%s\n" "${client_list}" "${client}")"
            done
          done
          i=0
          ## intersection of clients on the chosen services
          for client in $(printf %s"${client_list}" | tr " " "\n" | sort | uniq -c | grep "${service_total}" | sed "s/${service_total}//g" | tr -s "\n" " "); do
            i=$((i+1))
            [ "${client}" = "*" ] && break
            client_build_list="$(printf "%s\n%s\n%s\n%s\n" "${client_build_list}" "${client}" "." 0)"
          done
          if [ -z "${client_build_list}" ]; then
            title="Onion Service - INFO"
            text_no_client="\nNo client exist inside the intersection of the chosen services."
            "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text_no_client}" 10 50
          else
            [ "${i}" -gt 11 ] && i="11"
            # shellcheck disable=SC2086
            choice_client="$("${dialog_box}" --separate-output --backtitle "${backtitle}" --title "${title}" --checklist "${menu}" \
            "$((i+8+whiptail_height))" 50 "${i}" ${client_build_list} 3>&1 1>&2 2>&3)"
          fi
          if [ -n "${choice_client}" ]; then
            service_name_list="$(printf %s"${choice_service}" | sed "s/ /,/g")"
            client_name_list="$(printf %s"${choice_client}" | sed 's/ /,/g')"
          fi
        fi
        if [ -n "${client_name_list}" ]; then
          tput reset
          onionjuggler-cli-auth-server --off --service "${service_name_list}" --client "${client_name_list}"
          return_to_tui
        fi
      ;;

    esac
  ;;


  AUTH_CLIENT)
    option_plugin="onionjuggler-cli-auth-client"
    if ! check_plugin_enabled "${option_plugin}"; then
      text="${option_plugin} is disabled by configuration"
      "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text}" 10 50
    elif ! has "${option_plugin}"; then
      text="${option_plugin} is not installed"
      "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text}" 10 50
    else
      i=0
      for onion_auth in "${tor_data_dir_auth}"/*; do
        onion_auth="${onion_auth##*/}"
        onion_auth_name=${onion_auth%.auth_private}
        i=$((i+1))
        onion_auth_list="$(printf "%s\n%s\n%s\n" "${onion_auth_list}" "${onion_auth_name}" ".")"
      done
      title="Client Authorization - Client"
      menu="\nAs the onion service client:"
      if [ -z "${onion_auth_list}" ]; then
        auth_type="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((10+whiptail_height))" 80 3 \
        "GEN" "Generate a new key pair (public and private key)" \
        "PRIV" "Register your private key" \
        "IMP" "Import private configuration file" \
        3>&1 1>&2 2>&3)"
      else
        auth_type="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        "${ok_flag}" "Select" "${cancel_flag}" "Cancel" --menu "${menu}" "$((13+whiptail_height))" 80 6 \
        "LIST" "List all the authorizations inside ClientOnionAuthDir" \
        "EDIT" "Edit your client authorizations" \
        "GEN" "Generate a new key pair (public and private key)" \
        "PRIV" "Register your private key" \
        "IMP" "Import private configuration file" \
        "DEL" "Remove expired authorization" \
        3>&1 1>&2 2>&3)"
      fi
    fi

    case "${auth_type}" in

      LIST)
        onionjuggler-cli-auth-client --list
        return_to_tui
      ;;

      EDIT)
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_onion_auth="$("${dialog_box}" --title "${title}" --menu "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${onion_auth_list} 3>&1 1>&2 2>&3)"
        [ -n "${choice_onion_auth}" ] && "${editor}" "${tor_data_dir_auth}"/"${choice_onion_auth}".auth_private
      ;;

      GEN)
        menu="\nInsert the onion address of the service you want to authenticate:"
        onion_hostname="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --inputbox "${menu}" 9 80 3>&1 1>&2 2>&3)"
        if [ -n "${onion_hostname}" ]; then
          tput reset
          onionjuggler-cli-auth-client --on --onion "${onion_hostname}"
          return_to_tui
        fi
      ;;

      PRIV)
        menu="\nInsert the onion address of the service you want to authenticate:"
        onion_hostname="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --inputbox "${menu}" 9 80 3>&1 1>&2 2>&3)"
        menu="Insert the client's private key:"
        client_priv_key="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
        --inputbox "${menu}" 9 80 3>&1 1>&2 2>&3)"
        if { [ -n "${onion_hostname}" ] && [ -n "${client_priv_key}" ]; }; then
          tput reset
          onionjuggler-cli-auth-client --on --onion "${onion_hostname}" --client-priv-key "${client_priv_key}"
          return_to_tui
        fi
      ;;

      IMP)
        service_menu menu "Auth Client Import"
        if [ -n "${service_name_list}" ]; then
          title="Client Authorization - Client - Import"
          menu="\nClient private configuration file:"
          client_priv_file="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
          --inputbox "${menu}" 9 50 3>&1 1>&2 2>&3)"
          if [ -n "${client_priv_file}" ]; then
            tput reset
            onionjuggler-cli-auth-server --on --client-priv-file "${client_priv_file}"
            return_to_tui
          fi
        fi
      ;;

      DEL)
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_onion_auth="$("${dialog_box}" --separate-output --title "${title}" --checklist "${menu}" \
        "$((i+8+whiptail_height))" 80 "${i}" ${onion_auth_list} 3>&1 1>&2 2>&3)"
        [ -n "${choice_onion_auth}" ] && ONION_AUTH_NAME_LIST="$(printf %s"${ONION_AUTH_NAME_LIST}" | sed "s/ /,/g")"
        if [ -n "${ONION_AUTH_NAME_LIST}" ]; then
          tput reset
          onionjuggler-cli-auth-client --off --onion "${ONION_AUTH_NAME_LIST}"
          return_to_tui
        fi
      ;;

    esac
  ;;


  INFO)
    service_menu checklist "Info"
    if [ -n "${service_name_list}" ]; then
      tput reset
      onionjuggler-cli --list --service "${service_name_list}"
      return_to_tui
    fi
  ;;


  WEB)
    option_plugin="onionjuggler-cli-web"
    if ! check_plugin_enabled "${option_plugin}"; then
      text="${option_plugin} is disabled by configuration"
      "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text}" 10 50
    elif ! has "${option_plugin}"; then
      text="${option_plugin} is not installed"
      "${dialog_box}" --backtitle "${backtitle}" --title "${title}" --msgbox "${text}" 10 50
    else
      { [ "${webserver}" != "nginx" ] && [ "${webserver}" != "apache2" ]; } && error_msg "webserver can be either 'nginx' or 'apache2', not '${webserver}'"
      title="Web server - Status"
      menu="\nWould you like to enable or disable serving a website?"
      status="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" --menu "${menu}" "$((12+whiptail_height))" 50 3 \
      "LIST" "List enabled websites" \
      "ON" "Serve website" \
      "OFF" "Stop serving website" \
      3>&1 1>&2 2>&3)"
      status="$(printf %s"${status}" | tr '[:upper:]' '[:lower:]')"
    fi
    case "${status}" in

      list)
        tput reset
        onionjuggler-cli-web "--${status}"
        return_to_tui
      ;;

      on)
        if [ "${operating_system}" = "anon-workstation" ]; then
          title="Onion Service - Web - Activation"
          menu="Service name:"
          service_text="\nName your service directory in one string and no space.\n(e.g.: ssh)"
          service_name_list="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
          --inputbox "${service_text}" 10 60 3>&1 1>&2 2>&3)"
        else
          service_menu menu "Web server "
        fi
        if [ -n "${service_name_list}" ]; then
          i=0
          for folder in "${website_dir}"/*; do
            folder="${folder##*/}"
            i=$((i+1))
            folder_list="$(printf "%s\n%s\n%s\n" "${folder_list}" "${folder}" ".")"
          done
          title="Folder ${website_dir}"
          menu="\nUse spacebar to select:"
          [ "${i}" -gt 11 ] && i="11"
          # shellcheck disable=SC2086
          choice_folder="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" --menu "${menu}" \
          "$((i+8+whiptail_height))" 50 "${i}" ${folder_list} 3>&1 1>&2 2>&3)"
          [ -n "${choice_folder}" ] && folder_name_list="$(printf %s"${choice_folder}" | sed "s/ /,/g")"
          if [ -n "${folder_name_list}" ]; then
            if [ "${operating_system}" = "anon-workstation" ]; then
              title="Web server port selection"
              tcp_socket_text="\nInsert the virtual ports and targets. Only one virtual port required to create a service/
              \nInsert the ports in the following format:\nVIRPORT:TARGET (e.g.: 80:127.0.0.1:80)"
              service_ports="$("${dialog_box}" --clear --backtitle "${backtitle}" --title "${title}" \
              --inputbox "${tcp_socket_text}" 15 70 3>&1 1>&2 2>&3)"
              if [ -n "${service_ports}" ]; then
                tput reset
                onionjuggler-cli-web "--${status}" --service "${service_name_list}" --folder "${folder_name_list}" --no-check-service --port "${service_ports}"
                return_to_tui
              fi
            else
              tput reset
              onionjuggler-cli-web "--${status}" --service "${service_name_list}" --folder "${folder_name_list}"
              return_to_tui
            fi
          fi
        fi
      ;;

      off)
        i=0
        for service in "${webserver_conf_dir}/sites-enabled"/*; do
          service="${service##*/}"
          service="${service%*-onion.conf}"
          i=$((i+1))
          service_list="$(printf "%s\n%s\n" "${service_list}" "${service}" "." 0)"
        done
        title="Web Server - Disable Site"
        menu="\nUse spacebar to select:"
        [ "${i}" -gt 11 ] && i="11"
        # shellcheck disable=SC2086
        choice_service="$("${dialog_box}" --separate-output --clear --backtitle "${backtitle}" --title "${title}" --checklist "${menu}" \
        "$((i+8+whiptail_height))" 50 "${i}" ${service_list} 3>&1 1>&2 2>&3)"
        [ -n "${choice_service}" ] && service_name_list="$(printf %s"${choice_service}" | sed "s/ /,/g")"
        if [ -n "${service_name_list}" ]; then
          tput reset
          onionjuggler-cli-web "--${status}" --service "${service_name_list}"
          return_to_tui
        fi
      ;;

    esac

  ;;


  QUIT) exit 0;;

esac

tput reset
onionjuggler-tui
